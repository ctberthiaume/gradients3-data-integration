#!/usr/bin/env python3
import click
import os
import pendulum
import sys

month_table = { 'Apr': '04', 'May': '05' }

@click.command()
@click.argument('infile', type=click.Path(exists=True), nargs=1)
@click.argument('outfile', type=click.Path(), nargs=1)
def main(infile, outfile):
    header = ['time', 'lat', 'lon', 'temp', 'salinity', 'bio_sat', 'NCP', 'O2gasex']

    with open(infile, mode='r', encoding='utf-8') as fin:
        with open(outfile, mode='w', encoding='utf-8') as fout:
            fout.write(','.join(header) + '\n')
            header_seen = False
            for line in fin:
                if not header_seen:
                    header_seen = True
                    continue
                try:
                    outputs = parse_line(line)
                except Exception as e:
                    print(os.linesep.join(["Error with line:", line.rstrip(), str(e), '']), file=sys.stderr)
                else:
                    if outputs:
                        fout.write(','.join(outputs) + '\n')


def parse_line(line):
    fields = line.rstrip().split()
    if len(fields) != 9:
        raise Exception('Incorrect column number found')

    datestr1 = fields[0]  # dom-month_abrev-year
    datestr2 = fields[1]  # time, hopefully UTC!
    dom, month, year = datestr1.split('-')
    # In this file month is Apr or May
    month = month_table[month]
    iso8601 = '{}-{}-{}T{}Z'.format(year, month, dom, datestr2)
    date = pendulum.parse(iso8601)

    # Null is represented by 'NaN' which Python float() understands
    _ = [float(x) for x in fields[2:]]
    return [date.isoformat()] + fields[2:]


if __name__ == '__main__':
    main()
