#!/usr/bin/env python3
import click
import os
import pendulum
import sys


@click.command()
@click.argument('infile', type=click.Path(exists=True), nargs=1)
@click.argument('outfile', type=click.Path(), nargs=1)
def main(infile, outfile):
    header = ['time', 'sample', 'depth', 'lat', 'lon', 'po4']

    with open(infile, mode='r', encoding='utf-8') as fin:
        with open(outfile, mode='w', encoding='utf-8') as fout:
            fout.write(','.join(header) + '\n')
            header_seen = False
            for line in fin:
                if not header_seen:
                    header_seen = True
                    continue
                try:
                    outputs = parse_line(line)
                except Exception as e:
                    print(os.linesep.join(["Error with line:", line.rstrip(), str(e), '']), file=sys.stderr)
                else:
                    if outputs:
                        fout.write(','.join(outputs) + '\n')


def parse_line(line):
    fields = line.rstrip().split(',')
    if len(fields) != 7:
        raise Exception('Incorrect column number found')
    timestr = fields[2]  # hope it's UTC!
    datestr = fields[3]  # dom-month-year
    hours, minutes = [int(x) for x in timestr.split(':')]
    dom, month, year = [int(x) for x in datestr.split('-')]
    date = pendulum.datetime(year, month, dom, hour=hours, minute=minutes, tz='UTC')
    _ = [float(x) for x in fields[:2]]
    _ = [float(x) for x in fields[4:]]

    return [date.isoformat()] + fields[:2] + fields[4:]


if __name__ == '__main__':
    main()
